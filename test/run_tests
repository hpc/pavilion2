#!/usr/bin/env python3

# The __init__ for the tests module sets up all the tests.
import logging
import os
import sys
import unittest
import argparse


logging_root = '/tmp/{user}'.format(user=os.getlogin())
if not os.path.exists(logging_root):
    os.makedirs(logging_root)
log_path = os.path.join(logging_root, 'pavilion_tests.log')
logging.basicConfig(filename=log_path,)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(logging.Formatter(fmt='\x1b[2m%(message)s\x1b[0m'))
logging.getLogger('').addHandler(console)
print("Setting logging to output to ({}) and stderr".format(log_path))

config = 'test_data/pav_config_dir/pavilion.yaml'
if not os.path.exists(config):
    print("\nERROR")
    print("Could not find a config file at '{}'".format(config))
    print("To run tests, this file must be created.")
    print("It may be blank, or may contain proxy info.")
    sys.exit(1)

# Setup our paths to the pavilion libraries.
sys.path.append(os.path.abspath('../lib'))


def main():
    from pavilion.unittest import PavTestCase

    parser = argparse.ArgumentParser(
        usage="This runs all the tests in the tests/ directory. For a python " 
              "file to be recognized as a test suite, it must end in "
              "'_tests.py'. All other files are ignored")

    parser.add_argument('-s', '--skip', action='append', default=[],
                        help="Skip tests matching the given glob pattern. The "
                             "'test_' prefix is removed from the name for this "
                             "check.")
    parser.add_argument('-o', '--only', action='append', default=[],
                        help="Only run tests matching the given glob pattern. "
                             "The 'test_' prefix is removed from the name "
                             "for this check.")
    args = parser.parse_args(sys.argv[1:])

    if args.skip:
        PavTestCase.set_skip(args.skip)
    if args.only:
        PavTestCase.set_only(args.only)

    loader = unittest.TestLoader()
    suite = loader.discover('./tests', pattern='*_tests.py')
    unittest.TextTestRunner(verbosity=2).run(suite)


if __name__ == '__main__':
    main()
