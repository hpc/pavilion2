#!/usr/bin/env python3

# The __init__ for the tests module sets up all the tests.
import logging
import os
import sys
import unittest
import argparse
from pathlib import Path

this_file = Path(__file__).resolve()
lib_dir = this_file.parents[1]/'lib'
tests_dir = this_file.parent/'tests'

# Setup our paths to the pavilion libraries.
sys.path.append(str(lib_dir))

logging_root = this_file.parent/'working_dir'
if not logging_root.exists():
    os.makedirs(str(logging_root))
log_path = logging_root/'pav.log'
logging.basicConfig(filename=str(log_path))
console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(logging.Formatter(fmt='\x1b[2m{message}\x1b[0m',
                                       style='{'))

logging.getLogger('').handlers.pop(0)


def main():
    from pavilion.unittest import PavTestCase, ColorResult

    config = PavTestCase.TEST_DATA_ROOT/'pav_config_dir'/'pavilion.yaml'
    if not config.exists():
        print("\nERROR")
        print("Could not find a config file at '{}'".format(config))
        print("To run tests, this file must be created.")
        print("It may be blank, or may contain proxy info.")
        sys.exit(1)

    parser = argparse.ArgumentParser(
        usage="This runs all the tests in the tests/ directory. For a python " 
              "file to be recognized as a test suite, it must end in "
              "'_tests.py'. All other files are ignored")

    parser.add_argument('-s', '--skip', action='append', default=[],
                        help="Skip tests matching the given glob pattern. The "
                             "'test_' prefix is removed from the name for this "
                             "check.")
    parser.add_argument('-o', '--only', action='append', default=[],
                        help="Only run tests matching the given glob pattern. "
                             "The 'test_' prefix is removed from the name "
                             "for this check.")
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help="Print all log output to stderr.")
    args = parser.parse_args(sys.argv[1:])

    if args.skip:
        PavTestCase.set_skip(args.skip)
    if args.only:
        PavTestCase.set_only(args.only)
    if args.verbose:
        logging.getLogger('').addHandler(console)

    loader = unittest.TestLoader()
    suite = loader.discover(tests_dir.as_posix(), pattern='*_tests.py')
    runner = unittest.TextTestRunner(
        resultclass=ColorResult,
        verbosity=2)
    result = runner.run(suite)
    return len(result.errors) + len(result.failures)


if __name__ == '__main__':
    sys.exit(main())
