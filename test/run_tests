#!/usr/bin/env python3

import argparse
import shutil
import sys
import unittest
from pathlib import Path

this_file = Path(__file__).resolve()
lib_dir = this_file.parents[1]/'lib'
tests_dir = this_file.parent/'tests'

# Setup our paths to the pavilion libraries.
sys.path.append(str(lib_dir))


def main():
    from pavilion.unittest import PavTestCase, ColorResult
    from pavilion import log_setup

    config = PavTestCase.TEST_DATA_ROOT/'pav_config_dir'/'pavilion.yaml'
    if not config.exists():
        print("\nERROR")
        print("Could not find a config file at '{}'".format(config))
        print("To run tests, this file must be created.")
        print("It may be blank, or may contain proxy info.")
        sys.exit(1)

    parser = argparse.ArgumentParser(
        usage="This runs all the tests in the tests/ directory. For a python " 
              "file to be recognized as a test suite, it must end in "
              "'_tests.py'. All other files are ignored")

    parser.add_argument('-s', '--skip', action='append', default=[],
                        help="Skip tests matching the given glob pattern. The "
                             "'test_' prefix is removed from the name for this "
                             "check.")
    parser.add_argument('-o', '--only', action='append', default=[],
                        help="Only run tests matching the given glob pattern. "
                             "The 'test_' prefix is removed from the name "
                             "for this check.")
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help="Print all log output to stderr.")
    parser.add_argument('-q', '--quiet', action='store_true', default=False,
                        help="Silence.")
    parser.add_argument('-C', '--no-clear', action='store_true', default=False,
                        help="Don't clear the working directory before "
                             "running.")
    args = parser.parse_args(sys.argv[1:])

    if args.skip:
        PavTestCase.set_skip(args.skip)
    if args.only:
        PavTestCase.set_only(args.only)

    working_dir = this_file.parent/'working_dir'
    if not args.no_clear and working_dir.exists():
        print("Clearing out the working directory from prior unit test runs.")
        shutil.rmtree(working_dir, ignore_errors=True)

    log_setup.setup_loggers(PavTestCase().pav_cfg, verbose=args.verbose)

    verbosity = 0 if args.quiet else 2

    loader = unittest.TestLoader()
    suite = loader.discover(tests_dir.as_posix(), pattern='*_tests.py')
    runner = unittest.TextTestRunner(
        resultclass=ColorResult,
        verbosity=verbosity)
    result = runner.run(suite)
    return len(result.errors) + len(result.failures)


PROFILE = False


if __name__ == '__main__':

    if not PROFILE:
        sys.exit(main())
    else:
        import cProfile
        import pstats
        stats_file = '/tmp/pav_unittest_stats'
        cProfile.run('sys.exit(main())', stats_file)
        stats = pstats.Stats(stats_file)
        print('cumulative')
        stats.sort_stats('cumulative').print_stats(20)
        print('time')
        stats.sort_stats('time').print_stats(20)

