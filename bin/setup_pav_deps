#!/bin/bash

PAV_DIR=$(dirname "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")")

DEPS_STATUS=${PAV_DIR}/.deps_installed
DEPS_LOG=$(mktemp /tmp/pav_deps_log.XXXXXXX)

function setup_exit() {
    echo $1
    echo "Tip: Make sure your proxy settings are correct."
    echo -ne "\033[0m"
    exit 1
}

function eecho () {
    echo $1 1>&2
}

# Change output color to yellow
echo -ne "\033[1;33m" 1>&2
eecho "Setting up Pavilion dependencies. (This may take a minute.)" 1>&2

# Check if the dependencies are already installed (rare) at the system
# level.
if python3 ${PAV_DIR}/test/utils/check_pav_deps.py >/dev/null 2>&1; then
    eecho "All dependencies already available."
    echo "All dependencies already available." > ${DEPS_STATUS}
# Install the deps in the current virtual environment, if there is one. 
elif [[ -n "${VIRTUAL_ENV}" ]]; then
    eecho "Installing dependencies in current virtual env."
    if ! pip3 install -r ${PAV_DIR}/requirements.txt > ${DEPS_LOG} 2>&1; then
        echo "Dependency installation failed. See '${DEPS_LOG}'"
    fi
elif git -C ${PAV_DIR} rev-parse 2>/dev/null; then
    # This is a checkout of the git repo. Grab the dependencies with git.

    eecho "Updating dependencies via git submodule."
    if git -C ${PAV_DIR} submodule update --init > $DEPS_LOG 2>&1; then
        echo "Pulled pavilion dependencies via git on $(date)" > ${DEPS_STATUS}
    else
        setup_exit "Failed to setup dependences. See log at '${DEPS_LOG}'"
    fi
else
    # Check if our virtual env already exists, and create it if it doesn't.
    venv_path=${PAV_DIR}/.env
    if ! [[ -d ${venv_path} ]]; then

        eecho "Creating a virtual environment and installing dependencies in " 
        eecho "'${venv_path}'." 1>&2
        eecho "(Pavilion will automatically run under this virtual environment.)"

        if ! python3 -m venv ${venv_path} > ${DEPS_LOG} 2>&1; then
            eecho "Failed create virtual environment. See log at '${DEPS_LOG}'"
            setup_exit
        fi
    fi

    pip_path=${venv_path}/bin/pip
    if ! ${pip_path} install --upgrade pip > ${DEPS_LOG} 2>&1; then
        eecho "Failed to upgrade pip. See log at '${DEPS_LOG}'"
        setup_exit
    fi

    if ! ${pip_path} install -r ${PAV_DIR}/requirements.txt > ${DEPS_LOG} 2>&1; then
        eecho "Failed to update dependencies with pip. See log at '${DEPS_LOG}'"
        setup_exit
    fi
    echo "Pulled pavilion dependencies via pip on $(date)" > ${DEPS_STATUS}
fi
# Reset the terminal colors
echo -ne "\033[0m" 1>&2
